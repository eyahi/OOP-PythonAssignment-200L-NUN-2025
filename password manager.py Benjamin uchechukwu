import sqlite3
from cryptography.fernet import Fernet
import os
import sys
from typing import List, Optional, Tuple

class PasswordManager:
    def __init__(self):
        self.db_file = "passwords.db"
        self.key_file = "secret.key"
        self.cipher = self._get_cipher()
        self._init_db()

    def _get_cipher(self) -> Fernet:
        """Get or create encryption key"""
        if not os.path.exists(self.key_file):
            key = Fernet.generate_key()
            with open(self.key_file, 'wb') as f:
                f.write(key)
        else:
            with open(self.key_file, 'rb') as f:
                key = f.read()
        return Fernet(key)

    def _init_db(self):
        """Initialize database tables"""
        with sqlite3.connect(self.db_file) as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS passwords (
                    service TEXT NOT NULL,
                    username TEXT,
                    encrypted_password TEXT NOT NULL,
                    url TEXT,
                    notes TEXT,
                    PRIMARY KEY (service, username)
                )
            ''')
            conn.commit()

    def encrypt(self, data: str) -> str:
        """Encrypt sensitive data"""
        return self.cipher.encrypt(data.encode()).decode()

    def decrypt(self, encrypted_data: str) -> str:
        """Decrypt sensitive data"""
        return self.cipher.decrypt(encrypted_data.encode()).decode()

    def add_password(self):
        """Add a new password entry"""
        print("\nAdd New Password")
        service = input("Service/Website: ").strip()
        username = input("Username (optional): ").strip() or None
        password = input("Password: ").strip()
        url = input("URL (optional): ").strip() or None
        notes = input("Notes (optional): ").strip() or None

        encrypted = self.encrypt(password)

        with sqlite3.connect(self.db_file) as conn:
            try:
                conn.execute('''
                    INSERT INTO passwords VALUES (?, ?, ?, ?, ?)
                ''', (service, username, encrypted, url, notes))
                conn.commit()
                print("✓ logged in successfully")
            except sqlite3.IntegrityError:
                print("⚠ try again service/username")

    def get_password(self, service: str) -> List[Tuple]:
        """Retrieve passwords for a service"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.execute('''
                SELECT service, username, encrypted_password, url, notes 
                FROM passwords WHERE service = ?
            ''', (service,))
            return cursor.fetchall()

    def list_services(self) -> List[str]:
        """List all stored services"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.execute("SELECT DISTINCT service FROM passwords")
            return [row[0] for row in cursor.fetchall()]

    def delete_password(self, service: str, username: Optional[str] = None):
        """Delete a password entry"""
        with sqlite3.connect(self.db_file) as conn:
            if username:
                conn.execute('''
                    DELETE FROM passwords 
                    WHERE service = ? AND username = ?
                ''', (service, username))
            else:
                conn.execute('''
                    DELETE FROM passwords WHERE service = ?
                ''', (service,))
            conn.commit()
        print("✓ Password deleted")

    def search(self, query: str) -> List[Tuple]:
        """Search password entries"""
        with sqlite3.connect(self.db_file) as conn:
            cursor = conn.execute('''
                SELECT * FROM passwords 
                WHERE service LIKE ? OR 
                      username LIKE ? OR 
                      url LIKE ? OR 
                      notes LIKE ?
            ''', (f"%{query}%", f"%{query}%", f"%{query}%", f"%{query}%"))
            return cursor.fetchall()

def display_menu():
    print("\nPassword Manager")
    print("1. Add password")
    print("2. Retrieve password")
    print("3. List services")
    print("4. recheck")
    print("5. Delete password")
    print("6. Exit")
    return input("> ")

def main():
    pm = PasswordManager()
    
    while True:
        choice = display_menu()
        
        if choice == '1':
            pm.add_password()
            
        elif choice == '2':
            service = input("Enter service name: ").strip()
            entries = pm.get_password(service)
            
            if not entries:
                print("No entries found")
                continue
                
            print(f"\nFound {len(entries)} entries for {service}:")
            for i, (_, username, encrypted, url, notes) in enumerate(entries, 1):
                print(f"\nEntry {i}:")
                print(f"Username: {username or 'N/A'}")
                print(f"Password: {pm.decrypt(encrypted)}")
                print(f"URL: {url or 'N/A'}")
                print(f"Notes: {notes or 'N/A'}")
        
        elif choice == '3':
            services = pm.list_services()
            print("\nStored Services:")
            for service in services:
                print(f"- {service}")
        
        elif choice == '4':
            query = input("recheck term: ").strip()
            results = pm.search(query)
            
            if not results:
                print("No results found")
                continue
                
            print(f"\nFound {len(results)} matches:")
            for service, username, encrypted, url, notes in results:
                print(f"\nService: {service}")
                print(f"Username: {username or 'N/A'}")
                print(f"Password: {pm.decrypt(encrypted)}")
                print(f"URL: {url or 'N/A'}")
                print(f"Notes: {notes or 'N/A'}")
        
        elif choice == '5':
            service = input("Service to delete: ").strip()
            entries = pm.get_password(service)
            
            if not entries:
                print("No entries found")
                continue
                
            if len(entries) > 1:
                print("Multiple entries found:")
                for i, (_, username, _, _, _) in enumerate(entries, 1):
                    print(f"{i}. {username or '<no username>'}")
                selection = input("Select entry to delete: ")
                try:
                    username = entries[int(selection)-1][1]
                    pm.delete_password(service, username)
                except:
                    print("Invalid selection")
            else:
                pm.delete_password(service)
        
        elif choice == '6':
            print("Have a nice day Mr Ali Emmanuel !")
            sys.exit()
        
        else:
            print("Invalid choice")

if __name__ == "__main__":
    main()